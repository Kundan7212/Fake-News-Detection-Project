import streamlit as st
import pandas as pd
import numpy as np
import re
import pickle
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# Page config
st.set_page_config(
    page_title="Fake News Detector", 
    page_icon="üîç",
    layout="wide"
)

# Download NLTK resources
@st.cache_resource
def download_nltk_resources():
    nltk.download('punkt')
    nltk.download('stopwords')

download_nltk_resources()

# Initialize stemmer and stopwords
stemmer = PorterStemmer()
stop_words = set(stopwords.words('english'))

# Dataset URLs - replace with your dataset URLs if needed
fake_csv_url = "https://raw.githubusercontent.com/Kundan7212/Fake-News-Detection-Project/main/data/Fake.csv"
true_csv_url = "https://raw.githubusercontent.com/Kundan7212/Fake-News-Detection-Project/main/data/True.csv"

@st.cache_resource
def load_data_and_train_model():
    # Display a spinner while loading data
    with st.spinner("Loading data and training model... (this will only happen once)"):
        try:
            # Load data
            fake_news = pd.read_csv(fake_csv_url)
            true_news = pd.read_csv(true_csv_url)
            
            # Add labels
            fake_news['label'] = 0  # 0 for fake
            true_news['label'] = 1  # 1 for true
            
            # Combine datasets
            all_news = pd.concat([fake_news, true_news])
            
            # Preprocess function for dataset
            def simple_preprocess_text(text):
                text = str(text).lower()
                text = re.sub(r'[^\w\s]', '', text)
                text = re.sub(r'\d+', '', text)
                tokens = text.split()
                cleaned_tokens = [stemmer.stem(word) for word in tokens if word not in stop_words]
                return ' '.join(cleaned_tokens)
            
            # Apply preprocessing
            all_news['processed_text'] = all_news['text'].apply(simple_preprocess_text)
            
            # Prepare data for modeling
            X = all_news['processed_text']
            y = all_news['label']
            
            # Split data
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
            
            # TF-IDF Vectorization
            tfidf_vectorizer = TfidfVectorizer(max_features=5000)
            X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
            
            # Train Random Forest model (our best performer)
            model = RandomForestClassifier(n_estimators=100, random_state=42)
            model.fit(X_train_tfidf, y_train)
            
            return model, tfidf_vectorizer
            
        except Exception as e:
            st.error(f"Error loading data or training model: {e}")
            return None, None

# Preprocess text function for user input
def preprocess_text(text):
    # Convert to lowercase
    text = str(text).lower()
    # Remove punctuation and numbers
    text = re.sub(r'[^\w\s]', '', text)
    text = re.sub(r'\d+', '', text)
    # Simple tokenization
    tokens = text.split()
    # Remove stopwords and stem
    cleaned_tokens = [stemmer.stem(word) for word in tokens if word not in stop_words]
    return ' '.join(cleaned_tokens)

# Prediction function
def predict_news(text, model, vectorizer):
    # Preprocess the text
    processed_text = preprocess_text(text)
    # Vectorize the text
    text_vector = vectorizer.transform([processed_text])
    # Make prediction
    prediction = model.predict(text_vector)[0]
    probability = model.predict_proba(text_vector)[0]
    # Return results
    if prediction == 0:
        return {
            'prediction': 'FAKE',
            'confidence': f"{probability[0]*100:.2f}%",
            'color': 'red'
        }
    else:
        return {
            'prediction': 'REAL',
            'confidence': f"{probability[1]*100:.2f}%",
            'color': 'green'
        }

# Main function
def main():
    st.title("üîç Fake News Detector")
    
    st.markdown("""
    ## Welcome to my Fake News Detection Project!
    
    This application uses machine learning to analyze news content and determine if it's likely real or fake.
    
    ### How it works:
    1. Enter the news content in the text area below
    2. Click the "Analyze" button
    3. The model will predict whether the news is real or fake
    
    **Note**: This model was trained on a dataset of labeled real and fake news articles and achieves over 99% accuracy.
    """)
    
    # Create two columns for better layout
    col1, col2 = st.columns([3, 2])
    
    with col1:
        st.subheader("Enter News Content")
        news_text = st.text_area("Paste the news article text here:", height=250, 
                                placeholder="Enter news content here...")
        
        if st.button("Analyze", use_container_width=True):
            if len(news_text) < 20:
                st.error("Please enter more text for better analysis (at least 20 characters).")
            else:
                model, vectorizer = load_data_and_train_model()
                if model is not None and vectorizer is not None:
                    with st.spinner("Analyzing the news content..."):
                        result = predict_news(news_text, model, vectorizer)
                    
                    # Display result with custom styling
                    st.markdown(f"""
                    <div style="padding: 20px; border-radius: 10px; background-color: #f0f0f0; margin-top: 20px;">
                        <h2 style="color: {result['color']}; text-align: center;">
                            This news appears to be {result['prediction']}
                        </h2>
                        <p style="text-align: center; font-size: 18px;">
                            Confidence: <strong>{result['confidence']}</strong>
                        </p>
                    </div>
                    """, unsafe_allow_html=True)
    
    with col2:
        st.subheader("About this Project")
        st.markdown("""
        ### Technologies Used:
        - **Python** for data processing & model development
        - **NLTK** for natural language processing
        - **Scikit-learn** for machine learning algorithms
        - **Random Forest Classifier** as the prediction model
        - **Streamlit** for this web application
        
        ### Model Performance:
        - **Accuracy**: 99.7%
        - **Precision**: 99.8%
        - **Recall**: 99.7%
        
        ### Example News:
        """)
        
        # Example news sections
        if st.button("Real News Example", use_container_width=True):
            st.session_state['news_text'] = "WASHINGTON (Reuters) - The U.S. Department of Justice said on Friday it has scheduled the first federal execution of a woman in almost 70 years, setting a Dec. 8 date to put to death Lisa Montgomery, convicted of a 2004 murder."
            st.experimental_rerun()
            
        if st.button("Fake News Example", use_container_width=True):
            st.session_state['news_text'] = "Pope Francis Shocks World, Endorses Donald Trump for President. VATICAN CITY ‚Äì In an unprecedented move, Pope Francis has endorsed Donald Trump for president, saying 'Trump's strong views on immigration align with the Church's teachings.'"
            st.experimental_rerun()

# Run the app
if __name__ == "__main__":
    main()
